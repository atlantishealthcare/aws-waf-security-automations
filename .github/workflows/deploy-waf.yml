name: Build & Deploy AWS WAF Automation

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region'
        required: true
        default: 'eu-central-1'
      account_id:
        description: 'Target AWS Account ID'
        required: true
      bucket_prefix:
        description: 'S3 Bucket prefix (e.g. aws-waf-automation)'
        required: true
        default: 'aws-waf-automation'
      program_name:
        description: 'Program name (used as suffix in bucket names)'
        required: true

env:
  SOLUTION_NAME: aws-waf-automations
  VERSION: v1.2.0-custom

jobs:
  build:
    name: 🧱 Build and deploy WAF Solution
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest

    steps:
    - name: 🔐 Assume Role into Target Account
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ github.event.inputs.account_id }}:role/GitHubDeployRole
        aws-region: ${{ github.event.inputs.aws_region }}

    - name: 🪣 Create S3 Buckets and Export Env Vars
      id: setup-buckets
      run: |
        set -e

        REGION="${{ github.event.inputs.aws_region }}"
        PREFIX="${{ github.event.inputs.bucket_prefix }}"
        SUFFIX="${{ github.event.inputs.program_name }}"

        TEMPLATE_BUCKET="${PREFIX}-${SUFFIX}"
        DIST_BUCKET="${PREFIX}-${SUFFIX}-${REGION}"
        LOG_BUCKET="${PREFIX}-${SUFFIX}-logs"

        for BUCKET in "$TEMPLATE_BUCKET" "$DIST_BUCKET" "$LOG_BUCKET"; do
          if ! aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "Creating $BUCKET..."
            aws s3api create-bucket --bucket "$BUCKET" --region "$REGION" \
              --create-bucket-configuration LocationConstraint="$REGION"
          fi
        done

        echo "TEMPLATE_OUTPUT_BUCKET=$TEMPLATE_BUCKET" >> $GITHUB_ENV
        echo "DIST_OUTPUT_BUCKET=$DIST_BUCKET" >> $GITHUB_ENV
        echo "APP_ACCESS_LOGBUCKET=$LOG_BUCKET" >> $GITHUB_ENV
        echo "AWS_REGION=$REGION" >> $GITHUB_ENV

        echo "TEMPLATE_URL=https://${TEMPLATE_BUCKET}.s3.${REGION}.amazonaws.com/${{ env.SOLUTION_NAME }}/${{ env.VERSION }}/aws-waf-security-automations.template" >> $GITHUB_ENV

    - name: 📥 Checkout
      uses: actions/checkout@v3

    - name: 🐍 Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: 📦 Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | POETRY_VERSION=1.7.0 python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH  

    - name: 🛠 Install dependencies
      run: sudo apt-get update && sudo apt-get install -y jq zip

    - name: 🔨 Build the solution
      run: |
        cd deployment
        chmod +x ./build-s3-dist.sh
        ./build-s3-dist.sh "${{ env.TEMPLATE_OUTPUT_BUCKET }}" "${{ env.TEMPLATE_OUTPUT_BUCKET }}" "${{ env.SOLUTION_NAME }}" "${{ env.VERSION }}"

    - name: Move one level up
      run: cd ..

    - name: ☁️ Upload Global Assets
      run: |
        aws s3 cp ./deployment/global-s3-assets "s3://${{ env.TEMPLATE_OUTPUT_BUCKET }}/${{ env.SOLUTION_NAME }}/${{ env.VERSION }}" --recursive --acl bucket-owner-full-control

    - name: ☁️ Upload Regional Assets
      run: |
        aws s3 cp ./deployment/regional-s3-assets "s3://${{ env.DIST_OUTPUT_BUCKET }}/${{ env.SOLUTION_NAME }}/${{ env.VERSION }}" --recursive --acl bucket-owner-full-control

    - name: ☁️ Create or Update CloudFormation Stack
      run: |
        set -e
        STACK_NAME="waf-security-automations"

        PARAMS="\
          ParameterKey=ActivateAWSManagedAIPParam,ParameterValue=yes \
          ParameterKey=ActivateAWSManagedAPParam,ParameterValue=yes \
          ParameterKey=ActivateAWSManagedIPRParam,ParameterValue=yes \
          ParameterKey=ActivateAWSManagedKBIParam,ParameterValue=yes \
          ParameterKey=ActivateAWSManagedLinuxParam,ParameterValue=no \
          ParameterKey=ActivateAWSManagedPHPParam,ParameterValue=no \
          ParameterKey=ActivateAWSManagedPOSIXParam,ParameterValue=no \
          ParameterKey=ActivateAWSManagedRulesParam,ParameterValue=yes \
          ParameterKey=ActivateAWSManagedSQLParam,ParameterValue=yes \
          ParameterKey=ActivateAWSManagedWindowsParam,ParameterValue=no \
          ParameterKey=ActivateAWSManagedWPParam,ParameterValue=no \
          ParameterKey=ActivateBadBotProtectionParam,ParameterValue=yes \
          ParameterKey=ActivateCrossSiteScriptingProtectionParam,ParameterValue=yes \
          ParameterKey=ActivateHttpFloodProtectionParam,ParameterValue=no \
          ParameterKey=ActivateReputationListsProtectionParam,ParameterValue=yes \
          ParameterKey=ActivateScannersProbesProtectionParam,ParameterValue=no \
          ParameterKey=ActivateSqlInjectionProtectionParam,ParameterValue=yes \
          ParameterKey=ApiGatewayBadBotCWRoleParam,ParameterValue= \
          ParameterKey=AppAccessLogBucket,ParameterValue=${{ env.APP_ACCESS_LOGBUCKET }} \
          ParameterKey=AppAccessLogBucketLoggingStatusParam,ParameterValue=no \
          ParameterKey=AppAccessLogBucketPrefixParam,ParameterValue=AWSLogs/ \
          ParameterKey=AthenaQueryRunTimeScheduleParam,ParameterValue=5 \
          ParameterKey=EndpointType,ParameterValue=ALB \
          ParameterKey=ErrorThreshold,ParameterValue=50 \
          ParameterKey=HTTPFloodAthenaQueryGroupByParam,ParameterValue=None \
          ParameterKey=IPRetentionPeriodAllowedParam,ParameterValue=-1 \
          ParameterKey=IPRetentionPeriodDeniedParam,ParameterValue=-1 \
          ParameterKey=KeepDataInOriginalS3Location,ParameterValue=No \
          ParameterKey=LogGroupRetentionParam,ParameterValue=365 \
          ParameterKey=RequestThreshold,ParameterValue=100 \
          ParameterKey=RequestThresholdByCountryParam,ParameterValue= \
          ParameterKey=SNSEmailParam,ParameterValue= \
          ParameterKey=SqlInjectionProtectionSensitivityLevelParam,ParameterValue=LOW \
          ParameterKey=WAFBlockPeriod,ParameterValue=240"

        if aws cloudformation describe-stacks --stack-name "$STACK_NAME" >/dev/null 2>&1; then
          echo "🆙 Stack exists, updating..."
          aws cloudformation update-stack \
            --stack-name "$STACK_NAME" \
            --template-url "${{ env.TEMPLATE_URL }}" \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameters $PARAMS
        else
          echo "🆕 Stack does not exist, creating..."
          aws cloudformation create-stack \
            --stack-name "$STACK_NAME" \
            --template-url "${{ env.TEMPLATE_URL }}" \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameters $PARAMS
        fi
