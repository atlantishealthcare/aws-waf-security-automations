name: Build & Deploy AWS WAF Automation

on:
  workflow_dispatch:

env:
  SOLUTION_NAME: aws-waf-automations
  VERSION: v1.2.0-custom
  AWS_REGION: eu-central-1
  TEMPLATE_OUTPUT_BUCKET: aws-waf-automation-ahgskblenrep
  DIST_OUTPUT_BUCKET: aws-waf-automation-ahgskblenrep
  APP_ACCESS_LOGBUCKET: aws-waf-automation-ahgskblenrep-logs
  TEMPLATE_URL: https://aws-waf-automation-ahgskblenrep.s3.eu-central-1.amazonaws.com/aws-waf-automations/v1.2.0-custom/aws-waf-security-automations.template

jobs:
  build:
    name: 🧱 Build and deploy WAF Solution
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v3

    - name: 🐍 Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: 📦 Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | POETRY_VERSION=1.7.0 python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH  

    - name: 🛠 Install dependencies
      run: sudo apt-get update && sudo apt-get install -y jq zip

    - name: 🔨 Build the solution
      run: |
        cd deployment
        chmod +x ./build-s3-dist.sh
        ./build-s3-dist.sh $TEMPLATE_OUTPUT_BUCKET $DIST_OUTPUT_BUCKET $SOLUTION_NAME $VERSION

    - name: 🔐 Assume Role into Account
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::739133790765:role/GitHubDeployRole
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Move one level up
      run: cd ..

    - name: ☁️ Upload Global Assets
      run: |
        aws s3 cp ./deployment/global-s3-assets s3://$TEMPLATE_OUTPUT_BUCKET/$SOLUTION_NAME/$VERSION --recursive --acl bucket-owner-full-control

    - name: ☁️ Upload Regional Assets
      run: |
        aws s3 cp ./deployment/regional-s3-assets s3://$DIST_OUTPUT_BUCKET-$AWS_REGION/$SOLUTION_NAME/$VERSION --recursive --acl bucket-owner-full-control

    - name: ☁️ Create or Update CloudFormation Stack
      run: |
        set -e

        STACK_NAME="waf-security-automations"
        TEMPLATE_URL="${{ env.TEMPLATE_URL }}"

        PARAMS="\
          ParameterKey=ActivateAWSManagedAIPParam,ParameterValue=yes \
          ParameterKey=ActivateAWSManagedAPParam,ParameterValue=yes \
          ParameterKey=ActivateAWSManagedIPRParam,ParameterValue=yes \
          ParameterKey=ActivateAWSManagedKBIParam,ParameterValue=yes \
          ParameterKey=ActivateAWSManagedLinuxParam,ParameterValue=no \
          ParameterKey=ActivateAWSManagedPHPParam,ParameterValue=no \
          ParameterKey=ActivateAWSManagedPOSIXParam,ParameterValue=no \
          ParameterKey=ActivateAWSManagedRulesParam,ParameterValue=yes \
          ParameterKey=ActivateAWSManagedSQLParam,ParameterValue=yes \
          ParameterKey=ActivateAWSManagedWindowsParam,ParameterValue=no \
          ParameterKey=ActivateAWSManagedWPParam,ParameterValue=no \
          ParameterKey=ActivateBadBotProtectionParam,ParameterValue=yes \
          ParameterKey=ActivateCrossSiteScriptingProtectionParam,ParameterValue=yes \
          ParameterKey=ActivateHttpFloodProtectionParam,ParameterValue=no \
          ParameterKey=ActivateReputationListsProtectionParam,ParameterValue=yes \
          ParameterKey=ActivateScannersProbesProtectionParam,ParameterValue=no \
          ParameterKey=ActivateSqlInjectionProtectionParam,ParameterValue=yes \
          ParameterKey=ApiGatewayBadBotCWRoleParam,ParameterValue= \
          ParameterKey=AppAccessLogBucket,ParameterValue=${APP_ACCESS_LOGBUCKET} \
          ParameterKey=AppAccessLogBucketLoggingStatusParam,ParameterValue=no \
          ParameterKey=AppAccessLogBucketPrefixParam,ParameterValue=AWSLogs/ \
          ParameterKey=AthenaQueryRunTimeScheduleParam,ParameterValue=5 \
          ParameterKey=EndpointType,ParameterValue=ALB \
          ParameterKey=ErrorThreshold,ParameterValue=50 \
          ParameterKey=HTTPFloodAthenaQueryGroupByParam,ParameterValue=None \
          ParameterKey=IPRetentionPeriodAllowedParam,ParameterValue=-1 \
          ParameterKey=IPRetentionPeriodDeniedParam,ParameterValue=-1 \
          ParameterKey=KeepDataInOriginalS3Location,ParameterValue=No \
          ParameterKey=LogGroupRetentionParam,ParameterValue=365 \
          ParameterKey=RequestThreshold,ParameterValue=100 \
          ParameterKey=RequestThresholdByCountryParam,ParameterValue= \
          ParameterKey=SNSEmailParam,ParameterValue= \
          ParameterKey=SqlInjectionProtectionSensitivityLevelParam,ParameterValue=LOW \
          ParameterKey=WAFBlockPeriod,ParameterValue=240"

        if aws cloudformation describe-stacks --stack-name "$STACK_NAME" >/dev/null 2>&1; then
          echo "🆙 Stack exists, updating..."
          aws cloudformation update-stack \
            --stack-name "$STACK_NAME" \
            --template-url "$TEMPLATE_URL" \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameters $PARAMS
        else
          echo "🆕 Stack does not exist, creating..."
          aws cloudformation create-stack \
            --stack-name "$STACK_NAME" \
            --template-url "$TEMPLATE_URL" \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameters $PARAMS
        fi

